//
// Generated file, do not edit! Created by opp_msgtool 6.0 from nodes/mec/UALCMP/UALCMPMessages/UALCMPMessages.msg.
//

#ifndef __UALCMPMESSAGES_M_H
#define __UALCMPMESSAGES_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class UALCMPMessage;
class CreateContextApp;
class CreateContextAppAck;
class DeleteContextAppMessage;
class DeleteContextAppAckMessage;
/**
 * Class generated from <tt>nodes/mec/UALCMP/UALCMPMessages/UALCMPMessages.msg:12</tt> by opp_msgtool.
 * <pre>
 * message UALCMPMessage
 * {
 *     string type; // UALCMPMessage messageType (appListReq, appListRes, create, delete)
 *     int connectionId; // Placeholder to retrieve the correct devApp socket
 *     int requestId;
 * }
 * </pre>
 */
class UALCMPMessage : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string type;
    int connectionId = 0;
    int requestId = 0;

  private:
    void copy(const UALCMPMessage& other);

  protected:
    bool operator==(const UALCMPMessage&) = delete;

  public:
    UALCMPMessage(const char *name=nullptr, short kind=0);
    UALCMPMessage(const UALCMPMessage& other);
    virtual ~UALCMPMessage();
    UALCMPMessage& operator=(const UALCMPMessage& other);
    virtual UALCMPMessage *dup() const override {return new UALCMPMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getType() const;
    virtual void setType(const char * type);

    virtual int getConnectionId() const;
    virtual void setConnectionId(int connectionId);

    virtual int getRequestId() const;
    virtual void setRequestId(int requestId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const UALCMPMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, UALCMPMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>nodes/mec/UALCMP/UALCMPMessages/UALCMPMessages.msg:20</tt> by opp_msgtool.
 * <pre>
 * message CreateContextApp extends UALCMPMessage
 * {
 *     bool onboarded;
 *     string appPackagePath; // if onboarded == false
 *     string appDId;		   // if onboarded == true
 * 
 *     string ueIpAddress;   // this is used by the simulator to check if the ue has left the netowrk!
 * 
 *     string devAppId;      //device app identifier, used as identifier for the mecapp (i.e. ueAppId)
 * }
 * </pre>
 */
class CreateContextApp : public ::UALCMPMessage
{
  protected:
    bool onboarded = false;
    omnetpp::opp_string appPackagePath;
    omnetpp::opp_string appDId;
    omnetpp::opp_string ueIpAddress;
    omnetpp::opp_string devAppId;

  private:
    void copy(const CreateContextApp& other);

  protected:
    bool operator==(const CreateContextApp&) = delete;

  public:
    CreateContextApp(const char *name=nullptr, short kind=0);
    CreateContextApp(const CreateContextApp& other);
    virtual ~CreateContextApp();
    CreateContextApp& operator=(const CreateContextApp& other);
    virtual CreateContextApp *dup() const override {return new CreateContextApp(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual bool getOnboarded() const;
    virtual void setOnboarded(bool onboarded);

    virtual const char * getAppPackagePath() const;
    virtual void setAppPackagePath(const char * appPackagePath);

    virtual const char * getAppDId() const;
    virtual void setAppDId(const char * appDId);

    virtual const char * getUeIpAddress() const;
    virtual void setUeIpAddress(const char * ueIpAddress);

    virtual const char * getDevAppId() const;
    virtual void setDevAppId(const char * devAppId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CreateContextApp& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CreateContextApp& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>nodes/mec/UALCMP/UALCMPMessages/UALCMPMessages.msg:31</tt> by opp_msgtool.
 * <pre>
 * message CreateContextAppAck extends UALCMPMessage
 * {
 *     bool success;
 *     string appInstanceUri;
 * 
 *     string appInstanceId;
 *     int contextId;
 * }
 * </pre>
 */
class CreateContextAppAck : public ::UALCMPMessage
{
  protected:
    bool success = false;
    omnetpp::opp_string appInstanceUri;
    omnetpp::opp_string appInstanceId;
    int contextId = 0;

  private:
    void copy(const CreateContextAppAck& other);

  protected:
    bool operator==(const CreateContextAppAck&) = delete;

  public:
    CreateContextAppAck(const char *name=nullptr, short kind=0);
    CreateContextAppAck(const CreateContextAppAck& other);
    virtual ~CreateContextAppAck();
    CreateContextAppAck& operator=(const CreateContextAppAck& other);
    virtual CreateContextAppAck *dup() const override {return new CreateContextAppAck(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual bool getSuccess() const;
    virtual void setSuccess(bool success);

    virtual const char * getAppInstanceUri() const;
    virtual void setAppInstanceUri(const char * appInstanceUri);

    virtual const char * getAppInstanceId() const;
    virtual void setAppInstanceId(const char * appInstanceId);

    virtual int getContextId() const;
    virtual void setContextId(int contextId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CreateContextAppAck& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CreateContextAppAck& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>nodes/mec/UALCMP/UALCMPMessages/UALCMPMessages.msg:40</tt> by opp_msgtool.
 * <pre>
 * message DeleteContextAppMessage extends UALCMPMessage
 * {
 *     int contextId;
 * }
 * </pre>
 */
class DeleteContextAppMessage : public ::UALCMPMessage
{
  protected:
    int contextId = 0;

  private:
    void copy(const DeleteContextAppMessage& other);

  protected:
    bool operator==(const DeleteContextAppMessage&) = delete;

  public:
    DeleteContextAppMessage(const char *name=nullptr, short kind=0);
    DeleteContextAppMessage(const DeleteContextAppMessage& other);
    virtual ~DeleteContextAppMessage();
    DeleteContextAppMessage& operator=(const DeleteContextAppMessage& other);
    virtual DeleteContextAppMessage *dup() const override {return new DeleteContextAppMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getContextId() const;
    virtual void setContextId(int contextId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DeleteContextAppMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DeleteContextAppMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>nodes/mec/UALCMP/UALCMPMessages/UALCMPMessages.msg:45</tt> by opp_msgtool.
 * <pre>
 * message DeleteContextAppAckMessage extends UALCMPMessage
 * {
 *     bool success;
 *     int contextId;
 * }
 * </pre>
 */
class DeleteContextAppAckMessage : public ::UALCMPMessage
{
  protected:
    bool success = false;
    int contextId = 0;

  private:
    void copy(const DeleteContextAppAckMessage& other);

  protected:
    bool operator==(const DeleteContextAppAckMessage&) = delete;

  public:
    DeleteContextAppAckMessage(const char *name=nullptr, short kind=0);
    DeleteContextAppAckMessage(const DeleteContextAppAckMessage& other);
    virtual ~DeleteContextAppAckMessage();
    DeleteContextAppAckMessage& operator=(const DeleteContextAppAckMessage& other);
    virtual DeleteContextAppAckMessage *dup() const override {return new DeleteContextAppAckMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual bool getSuccess() const;
    virtual void setSuccess(bool success);

    virtual int getContextId() const;
    virtual void setContextId(int contextId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DeleteContextAppAckMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DeleteContextAppAckMessage& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline UALCMPMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<UALCMPMessage*>(ptr.get<cObject>()); }
template<> inline CreateContextApp *fromAnyPtr(any_ptr ptr) { return check_and_cast<CreateContextApp*>(ptr.get<cObject>()); }
template<> inline CreateContextAppAck *fromAnyPtr(any_ptr ptr) { return check_and_cast<CreateContextAppAck*>(ptr.get<cObject>()); }
template<> inline DeleteContextAppMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<DeleteContextAppMessage*>(ptr.get<cObject>()); }
template<> inline DeleteContextAppAckMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<DeleteContextAppAckMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __UALCMPMESSAGES_M_H

