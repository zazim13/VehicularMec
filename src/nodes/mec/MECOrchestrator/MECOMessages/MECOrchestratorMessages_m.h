//
// Generated file, do not edit! Created by opp_msgtool 6.0 from nodes/mec/MECOrchestrator/MECOMessages/MECOrchestratorMessages.msg.
//

#ifndef __MECORCHESTRATORMESSAGES_M_H
#define __MECORCHESTRATORMESSAGES_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class MECOrchestratorMessage;
class CreateAppMessage;
class DeleteAppMessage;
#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

/**
 * Class generated from <tt>nodes/mec/MECOrchestrator/MECOMessages/MECOrchestratorMessages.msg:16</tt> by opp_msgtool.
 * <pre>
 * message MECOrchestratorMessage
 * {
 *     int contextId; // identifier of the ueMecApp 
 *     int requestId; // used to inform the UALCMP to which request the response refers
 *     string type; // trigger of mecApp setup or termination 	 
 *     bool success;
 * }
 * </pre>
 */
class MECOrchestratorMessage : public ::omnetpp::cMessage
{
  protected:
    int contextId = 0;
    int requestId = 0;
    omnetpp::opp_string type;
    bool success = false;

  private:
    void copy(const MECOrchestratorMessage& other);

  protected:
    bool operator==(const MECOrchestratorMessage&) = delete;

  public:
    MECOrchestratorMessage(const char *name=nullptr, short kind=0);
    MECOrchestratorMessage(const MECOrchestratorMessage& other);
    virtual ~MECOrchestratorMessage();
    MECOrchestratorMessage& operator=(const MECOrchestratorMessage& other);
    virtual MECOrchestratorMessage *dup() const override {return new MECOrchestratorMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getContextId() const;
    virtual void setContextId(int contextId);

    virtual int getRequestId() const;
    virtual void setRequestId(int requestId);

    virtual const char * getType() const;
    virtual void setType(const char * type);

    virtual bool getSuccess() const;
    virtual void setSuccess(bool success);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MECOrchestratorMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MECOrchestratorMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>nodes/mec/MECOrchestrator/MECOMessages/MECOrchestratorMessages.msg:23</tt> by opp_msgtool.
 * <pre>
 * class CreateAppMessage extends inet::FieldsChunk
 * {
 *     unsigned int sno;
 *     simtime_t timestamp;
 * 
 *     //type of message
 *     string type;
 * 
 *     //communication informations
 *     string sourceAddress;
 *     int sourcePort;   // added by Alessandro Noferi
 *     string destinationAddress;
 *     int destinationPort;   // added by Alessandro Noferi
 *     string destinationMecAppAddress;
 *     int destinationMecAppPort;   // added by Alessandro Noferi
 * 
 * 
 *     //instantiation informations
 *     string MEModuleType;			//path where to find the cModule of the MEApp to instantiate
 *     string MEModuleName;			//module class name of the MEApp to instantiate
 *     int contextId;
 * 
 *     //identification information
 *     int ueAppID;
 * 
 *     //resources required
 *     double requiredDisk;
 *     double requiredRam;
 *     double requiredCpu;
 * 
 *     //service required
 *     string requiredService;
 *     //service provded
 *     string providedService;
 * 
 * }
 * </pre>
 */
class CreateAppMessage : public ::inet::FieldsChunk
{
  protected:
    unsigned int sno = 0;
    omnetpp::simtime_t timestamp = SIMTIME_ZERO;
    omnetpp::opp_string type;
    omnetpp::opp_string sourceAddress;
    int sourcePort = 0;
    omnetpp::opp_string destinationAddress;
    int destinationPort = 0;
    omnetpp::opp_string destinationMecAppAddress;
    int destinationMecAppPort = 0;
    omnetpp::opp_string MEModuleType;
    omnetpp::opp_string MEModuleName;
    int contextId = 0;
    int ueAppID = 0;
    double requiredDisk = 0;
    double requiredRam = 0;
    double requiredCpu = 0;
    omnetpp::opp_string requiredService;
    omnetpp::opp_string providedService;

  private:
    void copy(const CreateAppMessage& other);

  protected:
    bool operator==(const CreateAppMessage&) = delete;

  public:
    CreateAppMessage();
    CreateAppMessage(const CreateAppMessage& other);
    virtual ~CreateAppMessage();
    CreateAppMessage& operator=(const CreateAppMessage& other);
    virtual CreateAppMessage *dup() const override {return new CreateAppMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual unsigned int getSno() const;
    virtual void setSno(unsigned int sno);

    virtual omnetpp::simtime_t getTimestamp() const;
    virtual void setTimestamp(omnetpp::simtime_t timestamp);

    virtual const char * getType() const;
    virtual void setType(const char * type);

    virtual const char * getSourceAddress() const;
    virtual void setSourceAddress(const char * sourceAddress);

    virtual int getSourcePort() const;
    virtual void setSourcePort(int sourcePort);

    virtual const char * getDestinationAddress() const;
    virtual void setDestinationAddress(const char * destinationAddress);

    virtual int getDestinationPort() const;
    virtual void setDestinationPort(int destinationPort);

    virtual const char * getDestinationMecAppAddress() const;
    virtual void setDestinationMecAppAddress(const char * destinationMecAppAddress);

    virtual int getDestinationMecAppPort() const;
    virtual void setDestinationMecAppPort(int destinationMecAppPort);

    virtual const char * getMEModuleType() const;
    virtual void setMEModuleType(const char * MEModuleType);

    virtual const char * getMEModuleName() const;
    virtual void setMEModuleName(const char * MEModuleName);

    virtual int getContextId() const;
    virtual void setContextId(int contextId);

    virtual int getUeAppID() const;
    virtual void setUeAppID(int ueAppID);

    virtual double getRequiredDisk() const;
    virtual void setRequiredDisk(double requiredDisk);

    virtual double getRequiredRam() const;
    virtual void setRequiredRam(double requiredRam);

    virtual double getRequiredCpu() const;
    virtual void setRequiredCpu(double requiredCpu);

    virtual const char * getRequiredService() const;
    virtual void setRequiredService(const char * requiredService);

    virtual const char * getProvidedService() const;
    virtual void setProvidedService(const char * providedService);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CreateAppMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CreateAppMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>nodes/mec/MECOrchestrator/MECOMessages/MECOrchestratorMessages.msg:60</tt> by opp_msgtool.
 * <pre>
 * class DeleteAppMessage extends inet::FieldsChunk
 * {
 *     unsigned int sno;
 *     simtime_t timestamp;
 * 
 *     //type of message
 *     string type;
 * 
 *     //communication informations
 *     string sourceAddress;
 *     int sourcePort;   // added by Alessandro Noferi
 *     string destinationAddress;
 *     int destinationPort;   // added by Alessandro Noferi
 *     string destinationMecAppAddress;
 *     int destinationMecAppPort;   // added by Alessandro Noferi
 * 
 * 
 *     //instantiation informations
 *     string MEModuleType;			//path where to find the cModule of the MEApp to instantiate
 *     string MEModuleName;			//module class name of the MEApp to instantiate
 * 
 *     //identification information
 *     int ueAppID;
 * 
 *     //resources required
 *     unsigned int requiredDisk;
 *     unsigned int requiredRam;
 *     double requiredCpu;
 * 
 *     //service required
 *     string requiredService;
 * }
 * </pre>
 */
class DeleteAppMessage : public ::inet::FieldsChunk
{
  protected:
    unsigned int sno = 0;
    omnetpp::simtime_t timestamp = SIMTIME_ZERO;
    omnetpp::opp_string type;
    omnetpp::opp_string sourceAddress;
    int sourcePort = 0;
    omnetpp::opp_string destinationAddress;
    int destinationPort = 0;
    omnetpp::opp_string destinationMecAppAddress;
    int destinationMecAppPort = 0;
    omnetpp::opp_string MEModuleType;
    omnetpp::opp_string MEModuleName;
    int ueAppID = 0;
    unsigned int requiredDisk = 0;
    unsigned int requiredRam = 0;
    double requiredCpu = 0;
    omnetpp::opp_string requiredService;

  private:
    void copy(const DeleteAppMessage& other);

  protected:
    bool operator==(const DeleteAppMessage&) = delete;

  public:
    DeleteAppMessage();
    DeleteAppMessage(const DeleteAppMessage& other);
    virtual ~DeleteAppMessage();
    DeleteAppMessage& operator=(const DeleteAppMessage& other);
    virtual DeleteAppMessage *dup() const override {return new DeleteAppMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual unsigned int getSno() const;
    virtual void setSno(unsigned int sno);

    virtual omnetpp::simtime_t getTimestamp() const;
    virtual void setTimestamp(omnetpp::simtime_t timestamp);

    virtual const char * getType() const;
    virtual void setType(const char * type);

    virtual const char * getSourceAddress() const;
    virtual void setSourceAddress(const char * sourceAddress);

    virtual int getSourcePort() const;
    virtual void setSourcePort(int sourcePort);

    virtual const char * getDestinationAddress() const;
    virtual void setDestinationAddress(const char * destinationAddress);

    virtual int getDestinationPort() const;
    virtual void setDestinationPort(int destinationPort);

    virtual const char * getDestinationMecAppAddress() const;
    virtual void setDestinationMecAppAddress(const char * destinationMecAppAddress);

    virtual int getDestinationMecAppPort() const;
    virtual void setDestinationMecAppPort(int destinationMecAppPort);

    virtual const char * getMEModuleType() const;
    virtual void setMEModuleType(const char * MEModuleType);

    virtual const char * getMEModuleName() const;
    virtual void setMEModuleName(const char * MEModuleName);

    virtual int getUeAppID() const;
    virtual void setUeAppID(int ueAppID);

    virtual unsigned int getRequiredDisk() const;
    virtual void setRequiredDisk(unsigned int requiredDisk);

    virtual unsigned int getRequiredRam() const;
    virtual void setRequiredRam(unsigned int requiredRam);

    virtual double getRequiredCpu() const;
    virtual void setRequiredCpu(double requiredCpu);

    virtual const char * getRequiredService() const;
    virtual void setRequiredService(const char * requiredService);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DeleteAppMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DeleteAppMessage& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline MECOrchestratorMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<MECOrchestratorMessage*>(ptr.get<cObject>()); }
template<> inline CreateAppMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<CreateAppMessage*>(ptr.get<cObject>()); }
template<> inline DeleteAppMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<DeleteAppMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __MECORCHESTRATORMESSAGES_M_H

