//
// Generated file, do not edit! Created by opp_msgtool 6.0 from common/LteCommonEnum.msg.
//

#ifndef __LTECOMMONENUM_M_H
#define __LTECOMMONENUM_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

/**
 * Enum generated from <tt>common/LteCommonEnum.msg:14</tt> by opp_msgtool.
 * <pre>
 * /// Link Directions
 * enum Direction
 * {
 *     DL = 0;
 *     UL = 1;
 *     D2D = 2;
 *     D2D_MULTI = 3;
 *     UNKNOWN_DIRECTION = 4;
 * }
 * </pre>
 */
enum Direction {
    DL = 0,
    UL = 1,
    D2D = 2,
    D2D_MULTI = 3,
    UNKNOWN_DIRECTION = 4
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Direction& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Direction& e) { int n; b->unpack(n); e = static_cast<Direction>(n); }

/**
 * Enum generated from <tt>common/LteCommonEnum.msg:20</tt> by opp_msgtool.
 * <pre>
 * /// Modulations
 * enum LteMod
 * {
 *     _QPSK = 0;
 *     _16QAM = 1;
 *     _64QAM = 2;
 *     _256QAM = 3;
 * }
 * </pre>
 */
enum LteMod {
    _QPSK = 0,
    _16QAM = 1,
    _64QAM = 2,
    _256QAM = 3
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LteMod& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LteMod& e) { int n; b->unpack(n); e = static_cast<LteMod>(n); }

/**
 * Enum generated from <tt>common/LteCommonEnum.msg:26</tt> by opp_msgtool.
 * <pre>
 * /// Feedback reporting type
 * enum FeedbackType
 * {
 *     ALLBANDS = 0;
 *     PREFERRED = 1;
 *     WIDEBAND = 2;
 * }
 * </pre>
 */
enum FeedbackType {
    ALLBANDS = 0,
    PREFERRED = 1,
    WIDEBAND = 2
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const FeedbackType& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, FeedbackType& e) { int n; b->unpack(n); e = static_cast<FeedbackType>(n); }

/**
 * Enum generated from <tt>common/LteCommonEnum.msg:32</tt> by opp_msgtool.
 * <pre>
 * /// Feedback periodicity
 * enum FbPeriodicity
 * {
 *     PERIODIC = 0;
 *     APERIODIC = 1;
 * }
 * </pre>
 */
enum FbPeriodicity {
    PERIODIC = 0,
    APERIODIC = 1
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const FbPeriodicity& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, FbPeriodicity& e) { int n; b->unpack(n); e = static_cast<FbPeriodicity>(n); }

/**
 * Enum generated from <tt>common/LteCommonEnum.msg:38</tt> by opp_msgtool.
 * <pre>
 * /// Resource allocation type
 * enum RbAllocationType
 * {
 *     TYPE2_DISTRIBUTED = 0;
 *     TYPE2_LOCALIZED = 1;
 * }
 * </pre>
 */
enum RbAllocationType {
    TYPE2_DISTRIBUTED = 0,
    TYPE2_LOCALIZED = 1
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RbAllocationType& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RbAllocationType& e) { int n; b->unpack(n); e = static_cast<RbAllocationType>(n); }

/**
 * Enum generated from <tt>common/LteCommonEnum.msg:45</tt> by opp_msgtool.
 * <pre>
 * /// Gate Direction
 * enum GateDirection
 * {
 *     IN_GATE = 0;
 *     OUT_GATE = 1;
 * }
 * </pre>
 */
enum GateDirection {
    IN_GATE = 0,
    OUT_GATE = 1
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const GateDirection& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, GateDirection& e) { int n; b->unpack(n); e = static_cast<GateDirection>(n); }

/**
 * Enum generated from <tt>common/LteCommonEnum.msg:52</tt> by opp_msgtool.
 * <pre>
 * /// Lte Traffic Classes
 * enum LteTrafficClass
 * {
 *     CONVERSATIONAL = 0;
 *     STREAMING = 1;
 *     INTERACTIVE = 2;
 *     BACKGROUND = 3;
 *     UNKNOWN_TRAFFIC_TYPE = 4;
 * }
 * </pre>
 */
enum LteTrafficClass {
    CONVERSATIONAL = 0,
    STREAMING = 1,
    INTERACTIVE = 2,
    BACKGROUND = 3,
    UNKNOWN_TRAFFIC_TYPE = 4
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LteTrafficClass& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LteTrafficClass& e) { int n; b->unpack(n); e = static_cast<LteTrafficClass>(n); }

/**
 * Enum generated from <tt>common/LteCommonEnum.msg:58</tt> by opp_msgtool.
 * <pre>
 * /// Scheduler grant type
 * enum GrantType
 * {
 *     FITALL = 0;
 *     FIXED_ = 1;
 *     URGENT = 2;
 *     UNKNOWN_GRANT_TYPE = 3; // Note: FIXED would clash with <windows.h> 
 * }
 * </pre>
 */
enum GrantType {
    FITALL = 0,
    FIXED_ = 1,
    URGENT = 2,
    UNKNOWN_GRANT_TYPE = 3
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const GrantType& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, GrantType& e) { int n; b->unpack(n); e = static_cast<GrantType>(n); }

/**
 * Enum generated from <tt>common/LteCommonEnum.msg:64</tt> by opp_msgtool.
 * <pre>
 * /// Lte RLC Types
 * enum LteRlcType
 * {
 *     TM = 0;
 *     UM = 1;
 *     AM = 2;
 *     UNKNOWN_RLC_TYPE = 3;
 * }
 * </pre>
 */
enum LteRlcType {
    TM = 0,
    UM = 1,
    AM = 2,
    UNKNOWN_RLC_TYPE = 3
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LteRlcType& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LteRlcType& e) { int n; b->unpack(n); e = static_cast<LteRlcType>(n); }

/**
 * Enum generated from <tt>common/LteCommonEnum.msg:70</tt> by opp_msgtool.
 * <pre>
 * /// Index for UL transmission map
 * enum UlTransmissionMapTTI
 * {
 *     PREV_TTI = 0;
 *     CURR_TTI = 1;
 * }
 * </pre>
 */
enum UlTransmissionMapTTI {
    PREV_TTI = 0,
    CURR_TTI = 1
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const UlTransmissionMapTTI& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, UlTransmissionMapTTI& e) { int n; b->unpack(n); e = static_cast<UlTransmissionMapTTI>(n); }

/**
 * Enum generated from <tt>common/LteCommonEnum.msg:78</tt> by opp_msgtool.
 * <pre>
 * /// D2D Modes
 * // IM = Infastructure Mode
 * // DM = Direct (D2D) Mode
 * enum LteD2DMode
 * {
 *     IM = 0;
 *     DM = 1;
 * }
 * 
 * ///
 * //      Applications  
 * //
 * </pre>
 */
enum LteD2DMode {
    IM = 0,
    DM = 1
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LteD2DMode& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LteD2DMode& e) { int n; b->unpack(n); e = static_cast<LteD2DMode>(n); }

/**
 * Enum generated from <tt>common/LteCommonEnum.msg:87</tt> by opp_msgtool.
 * <pre>
 * enum ApplicationType
 * {
 *     VOIP = 0;
 *     VOD = 1;
 *     WEB = 2;
 *     CBR = 3;
 *     FTP = 4;
 *     GAMING = 5;
 *     FULLBUFFER = 6;
 *     UNKNOWN_APP = 7;
 * }
 * 
 * 
 * //
 * //  Scheduling discipline
 * //
 * </pre>
 */
enum ApplicationType {
    VOIP = 0,
    VOD = 1,
    WEB = 2,
    CBR = 3,
    FTP = 4,
    GAMING = 5,
    FULLBUFFER = 6,
    UNKNOWN_APP = 7
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ApplicationType& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ApplicationType& e) { int n; b->unpack(n); e = static_cast<ApplicationType>(n); }

/**
 * Enum generated from <tt>common/LteCommonEnum.msg:104</tt> by opp_msgtool.
 * <pre>
 * enum SchedDiscipline
 * {
 *     DRR = 0;
 *     PF = 1;
 *     MAXCI = 2;
 *     MAXCI_MB = 3;
 *     MAXCI_OPT_MB = 4;
 *     MAXCI_COMP = 5;
 *     ALLOCATOR_BESTFIT = 6;
 *     UNKNOWN_DISCIPLINE = 7;
 * }
 * </pre>
 */
enum SchedDiscipline {
    DRR = 0,
    PF = 1,
    MAXCI = 2,
    MAXCI_MB = 3,
    MAXCI_OPT_MB = 4,
    MAXCI_COMP = 5,
    ALLOCATOR_BESTFIT = 6,
    UNKNOWN_DISCIPLINE = 7
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SchedDiscipline& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SchedDiscipline& e) { int n; b->unpack(n); e = static_cast<SchedDiscipline>(n); }

/**
 * Enum generated from <tt>common/LteCommonEnum.msg:117</tt> by opp_msgtool.
 * <pre>
 * // specifies how the final CQI will be computed from the multiband ones
 * enum PilotComputationModes
 * {
 *     MIN_CQI = 0;
 *     MAX_CQI = 1;
 *     AVG_CQI = 2;
 *     MEDIAN_CQI = 3;
 *     ROBUST_CQI = 4;
 * }
 * </pre>
 */
enum PilotComputationModes {
    MIN_CQI = 0,
    MAX_CQI = 1,
    AVG_CQI = 2,
    MEDIAN_CQI = 3,
    ROBUST_CQI = 4
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PilotComputationModes& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PilotComputationModes& e) { int n; b->unpack(n); e = static_cast<PilotComputationModes>(n); }

/**
 * Enum generated from <tt>common/LteCommonEnum.msg:128</tt> by opp_msgtool.
 * <pre>
 * ///   Transmission Modes  
 * enum TxMode
 * {
 *     // Note: If you add more tx modes, update DL_NUM_TXMODE and UL_NUM_TXMODE
 *     SINGLE_ANTENNA_PORT0 = 0;
 *     SINGLE_ANTENNA_PORT5 = 1;
 *     TRANSMIT_DIVERSITY = 2;
 *     OL_SPATIAL_MULTIPLEXING = 3;
 *     CL_SPATIAL_MULTIPLEXING = 4;
 *     MULTI_USER = 5;
 *     UNKNOWN_TX_MODE = 6;
 * }
 * </pre>
 */
enum TxMode {
    SINGLE_ANTENNA_PORT0 = 0,
    SINGLE_ANTENNA_PORT5 = 1,
    TRANSMIT_DIVERSITY = 2,
    OL_SPATIAL_MULTIPLEXING = 3,
    CL_SPATIAL_MULTIPLEXING = 4,
    MULTI_USER = 5,
    UNKNOWN_TX_MODE = 6
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TxMode& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TxMode& e) { int n; b->unpack(n); e = static_cast<TxMode>(n); }

/**
 * Enum generated from <tt>common/LteCommonEnum.msg:140</tt> by opp_msgtool.
 * <pre>
 * enum TxDirectionType
 * {
 *     ANISOTROPIC = 0;
 *     OMNI = 1;
 * }
 * </pre>
 */
enum TxDirectionType {
    ANISOTROPIC = 0,
    OMNI = 1
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TxDirectionType& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TxDirectionType& e) { int n; b->unpack(n); e = static_cast<TxDirectionType>(n); }

/**
 * Enum generated from <tt>common/LteCommonEnum.msg:147</tt> by opp_msgtool.
 * <pre>
 * // Lte feedback type
 * enum FeedbackGeneratorType
 * {
 *     IDEAL = 0;
 *     REAL = 1;
 *     DAS_AWARE = 2;
 *     UNKNOW_FB_GEN_TYPE = 3;
 * }
 * </pre>
 */
enum FeedbackGeneratorType {
    IDEAL = 0,
    REAL = 1,
    DAS_AWARE = 2,
    UNKNOW_FB_GEN_TYPE = 3
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const FeedbackGeneratorType& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, FeedbackGeneratorType& e) { int n; b->unpack(n); e = static_cast<FeedbackGeneratorType>(n); }

/**
 * Enum generated from <tt>common/LteCommonEnum.msg:156</tt> by opp_msgtool.
 * <pre>
 * /// OFDMA layers (see FIXME lteAllocationModuble.h for "layers" meaning)
 * enum Plane
 * {
 *     MAIN_PLANE = 0;
 *     MU_MIMO_PLANE = 1;
 * }
 * </pre>
 */
enum Plane {
    MAIN_PLANE = 0,
    MU_MIMO_PLANE = 1
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Plane& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Plane& e) { int n; b->unpack(n); e = static_cast<Plane>(n); }

/**
 * Enum generated from <tt>common/LteCommonEnum.msg:162</tt> by opp_msgtool.
 * <pre>
 * enum DeploymentScenario
 * {
 *     INDOOR_HOTSPOT = 0;
 *     URBAN_MICROCELL = 1;
 *     URBAN_MACROCELL = 2;
 *     RURAL_MACROCELL = 3;
 *     SUBURBAN_MACROCELL = 4;
 *     UNKNOW_SCENARIO = 5;
 * }
 * </pre>
 */
enum DeploymentScenario {
    INDOOR_HOTSPOT = 0,
    URBAN_MICROCELL = 1,
    URBAN_MACROCELL = 2,
    RURAL_MACROCELL = 3,
    SUBURBAN_MACROCELL = 4,
    UNKNOW_SCENARIO = 5
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DeploymentScenario& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DeploymentScenario& e) { int n; b->unpack(n); e = static_cast<DeploymentScenario>(n); }

/**
 * Enum generated from <tt>common/LteCommonEnum.msg:175</tt> by opp_msgtool.
 * <pre>
 * //        DAS Support      
 * /// OFDMA Remotes (see FIXME LteAllocationModule.h for "antenna" meaning)
 * enum Remote
 * {
 *     MACRO = 0;
 *     RU1 = 1;
 *     RU2 = 2;
 *     RU3 = 3;
 *     RU4 = 4;
 *     RU5 = 5;
 *     RU6 = 6;
 *     UNKNOWN_RU = 7;
 * }
 * </pre>
 */
enum Remote {
    MACRO = 0,
    RU1 = 1,
    RU2 = 2,
    RU3 = 3,
    RU4 = 4,
    RU5 = 5,
    RU6 = 6,
    UNKNOWN_RU = 7
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Remote& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Remote& e) { int n; b->unpack(n); e = static_cast<Remote>(n); }

/**
 * Enum generated from <tt>common/LteCommonEnum.msg:188</tt> by opp_msgtool.
 * <pre>
 * // Lte PHY Frame Types 
 * enum LtePhyFrameType
 * {
 *     DATAPKT = 0;
 *     BROADCASTPKT = 1;
 *     FEEDBACKPKT = 2;
 *     HANDOVERPKT = 3;
 *     HARQPKT = 4;
 *     GRANTPKT = 5;
 *     RACPKT = 6;
 *     D2DMODESWITCHPKT = 7;
 *     UNKNOWN_TYPE = 8;
 * }
 * </pre>
 */
enum LtePhyFrameType {
    DATAPKT = 0,
    BROADCASTPKT = 1,
    FEEDBACKPKT = 2,
    HANDOVERPKT = 3,
    HARQPKT = 4,
    GRANTPKT = 5,
    RACPKT = 6,
    D2DMODESWITCHPKT = 7,
    UNKNOWN_TYPE = 8
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LtePhyFrameType& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LtePhyFrameType& e) { int n; b->unpack(n); e = static_cast<LtePhyFrameType>(n); }

/**
 * Enum generated from <tt>common/LteCommonEnum.msg:203</tt> by opp_msgtool.
 * <pre>
 * //  RAN Node Types  
 * enum RanNodeType
 * {
 *     INTERNET = 0; /// Internet side of the Lte network
 *     ENODEB = 1; /// eNodeB
 *     GNODEB = 2; /// gNodeB
 *     UE = 3; /// UE
 *     UNKNOWN_NODE_TYPE = 4;/// unknown
 * }
 * </pre>
 */
enum RanNodeType {
    INTERNET = 0,
    ENODEB = 1,
    GNODEB = 2,
    UE = 3,
    UNKNOWN_NODE_TYPE = 4
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RanNodeType& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RanNodeType& e) { int n; b->unpack(n); e = static_cast<RanNodeType>(n); }

/**
 * Enum generated from <tt>common/LteCommonEnum.msg:213</tt> by opp_msgtool.
 * <pre>
 * //  Core Network Types  
 * enum CoreNodeType
 * {
 *     ENB = 0;          // LTE
 *     PGW = 1;
 *     SGW = 2;
 *     GNB = 3;          // 5G
 *     UPF = 4;
 *     UPF_MEC = 5;      // MEC
 * }
 * </pre>
 */
enum CoreNodeType {
    ENB = 0,
    PGW = 1,
    SGW = 2,
    GNB = 3,
    UPF = 4,
    UPF_MEC = 5
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CoreNodeType& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CoreNodeType& e) { int n; b->unpack(n); e = static_cast<CoreNodeType>(n); }

/**
 * Enum generated from <tt>common/LteCommonEnum.msg:225</tt> by opp_msgtool.
 * <pre>
 * // Types of BSR  * TODO add LONG/TRUNCATED BSR  
 * enum BsrType
 * {
 *     SHORT_BSR = 0;
 *     D2D_SHORT_BSR = 1;
 *     D2D_MULTI_SHORT_BSR = 2;
 * }
 * </pre>
 */
enum BsrType {
    SHORT_BSR = 0,
    D2D_SHORT_BSR = 1,
    D2D_MULTI_SHORT_BSR = 2
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const BsrType& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, BsrType& e) { int n; b->unpack(n); e = static_cast<BsrType>(n); }

/**
 * Enum generated from <tt>common/LteCommonEnum.msg:234</tt> by opp_msgtool.
 * <pre>
 * /// H-ARQ feedback (ACK, NACK)
 * enum HarqAcknowledgment
 * {
 *     HARQNACK = 0;
 *     HARQACK = 1;
 * }
 * </pre>
 */
enum HarqAcknowledgment {
    HARQNACK = 0,
    HARQACK = 1
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const HarqAcknowledgment& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, HarqAcknowledgment& e) { int n; b->unpack(n); e = static_cast<HarqAcknowledgment>(n); }

/**
 * Enum generated from <tt>common/LteCommonEnum.msg:240</tt> by opp_msgtool.
 * <pre>
 * /// TX H-ARQ pdu status
 * enum TxHarqPduStatus
 * {
 *     /// pdu is ready for retransmission (nack received)
 *     TXHARQ_PDU_BUFFERED = 0;
 *     /// pdu is waiting for feedback
 *     TXHARQ_PDU_WAITING = 1;
 *     /// no pdu inside this process (empty process)
 *     TXHARQ_PDU_EMPTY = 2;
 *     /// pdu selected for transmission
 *     TXHARQ_PDU_SELECTED = 3;
 * }
 * </pre>
 */
enum TxHarqPduStatus {
    TXHARQ_PDU_BUFFERED = 0,
    TXHARQ_PDU_WAITING = 1,
    TXHARQ_PDU_EMPTY = 2,
    TXHARQ_PDU_SELECTED = 3
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TxHarqPduStatus& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TxHarqPduStatus& e) { int n; b->unpack(n); e = static_cast<TxHarqPduStatus>(n); }

/**
 * Enum generated from <tt>common/LteCommonEnum.msg:253</tt> by opp_msgtool.
 * <pre>
 * /// RX H-ARQ pdu status
 * enum RxHarqPduStatus
 * {
 *     /// no pdu, process is empty
 *     RXHARQ_PDU_EMPTY = 0;
 *     /// pdu is in evaluating state
 *     RXHARQ_PDU_EVALUATING = 1;
 *     /// pdu has been evaluated and it is correct
 *     RXHARQ_PDU_CORRECT = 2;
 *     /// pdu has been evaluated and it is not correct
 *     RXHARQ_PDU_CORRUPTED = 3;
 * }
 * </pre>
 */
enum RxHarqPduStatus {
    RXHARQ_PDU_EMPTY = 0,
    RXHARQ_PDU_EVALUATING = 1,
    RXHARQ_PDU_CORRECT = 2,
    RXHARQ_PDU_CORRUPTED = 3
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RxHarqPduStatus& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RxHarqPduStatus& e) { int n; b->unpack(n); e = static_cast<RxHarqPduStatus>(n); }

/**
 * Enum generated from <tt>common/LteCommonEnum.msg:267</tt> by opp_msgtool.
 * <pre>
 * //  ********************* * Incell Interference Support *********************
 * enum EnbType
 * {
 *     // macro eNb
 *     MACRO_ENB = 0;
 *     // micro eNb
 *     MICRO_ENB = 1;
 * }
 * </pre>
 */
enum EnbType {
    MACRO_ENB = 0,
    MICRO_ENB = 1
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EnbType& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EnbType& e) { int n; b->unpack(n); e = static_cast<EnbType>(n); }


namespace omnetpp {


}  // namespace omnetpp

#endif // ifndef __LTECOMMONENUM_M_H

