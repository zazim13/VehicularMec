//
// Generated file, do not edit! Created by opp_msgtool 6.0 from x2/packet/LteX2Message.msg.
//

#ifndef __LTEX2MESSAGE_M_H
#define __LTEX2MESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class LteX2Message;
class X2InformationElement;
#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

/**
 * Class generated from <tt>x2/packet/LteX2Message.msg:21</tt> by opp_msgtool.
 * <pre>
 * class LteX2Message extends inet::FieldsChunk
 * {
 *     \@customize(true);
 *     chunkLength = inet::B(11); // FIXME needs to be checked: 
 *                                // realistic chunk length without X2 information elements?
 *                                // Must at least be 11 Bytes for serialization: 
 *                                // Type (1 B), sourceId (4 B), destinationId (4 B), IE list size (2 B))
 *     unsigned int sourceId;
 *     unsigned int destinationId;
 * }
 * </pre>
 *
 * LteX2Message_Base is only useful if it gets subclassed, and LteX2Message is derived from it.
 * The minimum code to be written for LteX2Message is the following:
 *
 * <pre>
 * class LteX2Message : public LteX2Message_Base
 * {
 *   private:
 *     void copy(const LteX2Message& other) { ... }

 *   public:
 *     LteX2Message() : LteX2Message_Base() {}
 *     LteX2Message(const LteX2Message& other) : LteX2Message_Base(other) {copy(other);}
 *     LteX2Message& operator=(const LteX2Message& other) {if (this==&other) return *this; LteX2Message_Base::operator=(other); copy(other); return *this;}
 *     virtual LteX2Message *dup() const override {return new LteX2Message(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from LteX2Message_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(LteX2Message)
 * </pre>
 */
class LteX2Message_Base : public ::inet::FieldsChunk
{
  protected:
    unsigned int sourceId = 0;
    unsigned int destinationId = 0;

  private:
    void copy(const LteX2Message_Base& other);

  protected:
    bool operator==(const LteX2Message_Base&) = delete;
    // make constructors protected to avoid instantiation
    LteX2Message_Base();
    LteX2Message_Base(const LteX2Message_Base& other);
    // make assignment operator protected to force the user override it
    LteX2Message_Base& operator=(const LteX2Message_Base& other);

  public:
    virtual ~LteX2Message_Base();
    virtual LteX2Message_Base *dup() const override {throw omnetpp::cRuntimeError("You forgot to manually add a dup() function to class LteX2Message");}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual unsigned int getSourceId() const;
    virtual void setSourceId(unsigned int sourceId);

    virtual unsigned int getDestinationId() const;
    virtual void setDestinationId(unsigned int destinationId);
};

/**
 * Class generated from <tt>x2/packet/LteX2Message.msg:32</tt> by opp_msgtool.
 * <pre>
 * class X2InformationElement
 * {
 *     \@customize(true);
 * }
 * </pre>
 *
 * X2InformationElement_Base is only useful if it gets subclassed, and X2InformationElement is derived from it.
 * The minimum code to be written for X2InformationElement is the following:
 *
 * <pre>
 * class X2InformationElement : public X2InformationElement_Base
 * {
 *   private:
 *     void copy(const X2InformationElement& other) { ... }

 *   public:
 *     X2InformationElement() : X2InformationElement_Base() {}
 *     X2InformationElement(const X2InformationElement& other) : X2InformationElement_Base(other) {copy(other);}
 *     X2InformationElement& operator=(const X2InformationElement& other) {if (this==&other) return *this; X2InformationElement_Base::operator=(other); copy(other); return *this;}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from X2InformationElement_Base
 * };
 * </pre>
 */
class X2InformationElement_Base
{
  protected:

  private:
    void copy(const X2InformationElement_Base& other);

  protected:
    bool operator==(const X2InformationElement_Base&) = delete;
    // make constructors protected to avoid instantiation
    X2InformationElement_Base();
    X2InformationElement_Base(const X2InformationElement_Base& other);
    // make assignment operator protected to force the user override it
    X2InformationElement_Base& operator=(const X2InformationElement_Base& other);

  public:
    virtual ~X2InformationElement_Base();
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);
};


namespace omnetpp {

template<> inline LteX2Message_Base *fromAnyPtr(any_ptr ptr) { return check_and_cast<LteX2Message_Base*>(ptr.get<cObject>()); }
inline any_ptr toAnyPtr(const X2InformationElement_Base *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline X2InformationElement_Base *fromAnyPtr(any_ptr ptr) { return ptr.get<X2InformationElement_Base>(); }

}  // namespace omnetpp

#endif // ifndef __LTEX2MESSAGE_M_H

