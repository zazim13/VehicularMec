//
// Generated file, do not edit! Created by opp_msgtool 6.0 from x2/packet/X2ControlInfo.msg.
//

#ifndef __X2CONTROLINFO_M_H
#define __X2CONTROLINFO_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class X2ControlInfoTag;
#include "inet/common/TagBase_m.h" // import inet.common.TagBase

// cplusplus {{
    #include "common/LteCommon.h"
    typedef std::list<X2NodeId> DestinationIdList;
// }}

/**
 * Class generated from <tt>x2/packet/X2ControlInfo.msg:40</tt> by opp_msgtool.
 * <pre>
 * //
 * // \@class LteX2ControlInfo
 * //
 * // This class contains:
 * // - Source X2 ID
 * // - List of destionation IDs
 * // - init flag
 * //
 * class X2ControlInfoTag extends inet::TagBase
 * {
 *     uint16 sourceId;                          // Source X2NodeId
 *     DestinationIdList destIdList;             // List of destination X2NodeId
 * 
 *     bool init = false;
 * }
 * </pre>
 */
class X2ControlInfoTag : public ::inet::TagBase
{
  protected:
    uint16_t sourceId = 0;
    DestinationIdList destIdList;
    bool init = false;

  private:
    void copy(const X2ControlInfoTag& other);

  protected:
    bool operator==(const X2ControlInfoTag&) = delete;

  public:
    X2ControlInfoTag();
    X2ControlInfoTag(const X2ControlInfoTag& other);
    virtual ~X2ControlInfoTag();
    X2ControlInfoTag& operator=(const X2ControlInfoTag& other);
    virtual X2ControlInfoTag *dup() const override {return new X2ControlInfoTag(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint16_t getSourceId() const;
    virtual void setSourceId(uint16_t sourceId);

    virtual const DestinationIdList& getDestIdList() const;
    virtual DestinationIdList& getDestIdListForUpdate() { return const_cast<DestinationIdList&>(const_cast<X2ControlInfoTag*>(this)->getDestIdList());}
    virtual void setDestIdList(const DestinationIdList& destIdList);

    virtual bool getInit() const;
    virtual void setInit(bool init);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const X2ControlInfoTag& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, X2ControlInfoTag& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

inline any_ptr toAnyPtr(const DestinationIdList *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline DestinationIdList *fromAnyPtr(any_ptr ptr) { return ptr.get<DestinationIdList>(); }
template<> inline X2ControlInfoTag *fromAnyPtr(any_ptr ptr) { return check_and_cast<X2ControlInfoTag*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __X2CONTROLINFO_M_H

