//
// Generated file, do not edit! Created by opp_msgtool 6.0 from apps/mec/RealTimeVideoStreamingApp/packets/RTVideoStreamingPackets.msg.
//

#ifndef __RTVIDEOSTREAMINGPACKETS_M_H
#define __RTVIDEOSTREAMINGPACKETS_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class RealTimeVideoStreamingAppPacket;
class StartRealTimeVideoStreamingAppPacket;
class StartSessionRealTimeVideoStreamingAppPacket;
class StopSessionRealTimeVideoStreamingAppPacket;
class RealTimeVideoStreamingAppSegmentHeader;
#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

/**
 * Class generated from <tt>apps/mec/RealTimeVideoStreamingApp/packets/RTVideoStreamingPackets.msg:17</tt> by opp_msgtool.
 * <pre>
 * class RealTimeVideoStreamingAppPacket extends inet::FieldsChunk
 * {
 *     int type;
 * }
 * </pre>
 */
class RealTimeVideoStreamingAppPacket : public ::inet::FieldsChunk
{
  protected:
    int type = 0;

  private:
    void copy(const RealTimeVideoStreamingAppPacket& other);

  protected:
    bool operator==(const RealTimeVideoStreamingAppPacket&) = delete;

  public:
    RealTimeVideoStreamingAppPacket();
    RealTimeVideoStreamingAppPacket(const RealTimeVideoStreamingAppPacket& other);
    virtual ~RealTimeVideoStreamingAppPacket();
    RealTimeVideoStreamingAppPacket& operator=(const RealTimeVideoStreamingAppPacket& other);
    virtual RealTimeVideoStreamingAppPacket *dup() const override {return new RealTimeVideoStreamingAppPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getType() const;
    virtual void setType(int type);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RealTimeVideoStreamingAppPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RealTimeVideoStreamingAppPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>apps/mec/RealTimeVideoStreamingApp/packets/RTVideoStreamingPackets.msg:22</tt> by opp_msgtool.
 * <pre>
 * class StartRealTimeVideoStreamingAppPacket extends RealTimeVideoStreamingAppPacket
 * {
 *     int fps;
 *     string codec;
 *     int sessionId;
 * }
 * </pre>
 */
class StartRealTimeVideoStreamingAppPacket : public ::RealTimeVideoStreamingAppPacket
{
  protected:
    int fps = 0;
    omnetpp::opp_string codec;
    int sessionId = 0;

  private:
    void copy(const StartRealTimeVideoStreamingAppPacket& other);

  protected:
    bool operator==(const StartRealTimeVideoStreamingAppPacket&) = delete;

  public:
    StartRealTimeVideoStreamingAppPacket();
    StartRealTimeVideoStreamingAppPacket(const StartRealTimeVideoStreamingAppPacket& other);
    virtual ~StartRealTimeVideoStreamingAppPacket();
    StartRealTimeVideoStreamingAppPacket& operator=(const StartRealTimeVideoStreamingAppPacket& other);
    virtual StartRealTimeVideoStreamingAppPacket *dup() const override {return new StartRealTimeVideoStreamingAppPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getFps() const;
    virtual void setFps(int fps);

    virtual const char * getCodec() const;
    virtual void setCodec(const char * codec);

    virtual int getSessionId() const;
    virtual void setSessionId(int sessionId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const StartRealTimeVideoStreamingAppPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, StartRealTimeVideoStreamingAppPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>apps/mec/RealTimeVideoStreamingApp/packets/RTVideoStreamingPackets.msg:31</tt> by opp_msgtool.
 * <pre>
 * class StartSessionRealTimeVideoStreamingAppPacket extends RealTimeVideoStreamingAppPacket
 * {
 *     int fps;
 *     string codec;
 *     int sessionId;
 * }
 * </pre>
 */
class StartSessionRealTimeVideoStreamingAppPacket : public ::RealTimeVideoStreamingAppPacket
{
  protected:
    int fps = 0;
    omnetpp::opp_string codec;
    int sessionId = 0;

  private:
    void copy(const StartSessionRealTimeVideoStreamingAppPacket& other);

  protected:
    bool operator==(const StartSessionRealTimeVideoStreamingAppPacket&) = delete;

  public:
    StartSessionRealTimeVideoStreamingAppPacket();
    StartSessionRealTimeVideoStreamingAppPacket(const StartSessionRealTimeVideoStreamingAppPacket& other);
    virtual ~StartSessionRealTimeVideoStreamingAppPacket();
    StartSessionRealTimeVideoStreamingAppPacket& operator=(const StartSessionRealTimeVideoStreamingAppPacket& other);
    virtual StartSessionRealTimeVideoStreamingAppPacket *dup() const override {return new StartSessionRealTimeVideoStreamingAppPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getFps() const;
    virtual void setFps(int fps);

    virtual const char * getCodec() const;
    virtual void setCodec(const char * codec);

    virtual int getSessionId() const;
    virtual void setSessionId(int sessionId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const StartSessionRealTimeVideoStreamingAppPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, StartSessionRealTimeVideoStreamingAppPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>apps/mec/RealTimeVideoStreamingApp/packets/RTVideoStreamingPackets.msg:38</tt> by opp_msgtool.
 * <pre>
 * class StopSessionRealTimeVideoStreamingAppPacket extends RealTimeVideoStreamingAppPacket
 * {
 *     int sessionId;
 * }
 * </pre>
 */
class StopSessionRealTimeVideoStreamingAppPacket : public ::RealTimeVideoStreamingAppPacket
{
  protected:
    int sessionId = 0;

  private:
    void copy(const StopSessionRealTimeVideoStreamingAppPacket& other);

  protected:
    bool operator==(const StopSessionRealTimeVideoStreamingAppPacket&) = delete;

  public:
    StopSessionRealTimeVideoStreamingAppPacket();
    StopSessionRealTimeVideoStreamingAppPacket(const StopSessionRealTimeVideoStreamingAppPacket& other);
    virtual ~StopSessionRealTimeVideoStreamingAppPacket();
    StopSessionRealTimeVideoStreamingAppPacket& operator=(const StopSessionRealTimeVideoStreamingAppPacket& other);
    virtual StopSessionRealTimeVideoStreamingAppPacket *dup() const override {return new StopSessionRealTimeVideoStreamingAppPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSessionId() const;
    virtual void setSessionId(int sessionId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const StopSessionRealTimeVideoStreamingAppPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, StopSessionRealTimeVideoStreamingAppPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>apps/mec/RealTimeVideoStreamingApp/packets/RTVideoStreamingPackets.msg:43</tt> by opp_msgtool.
 * <pre>
 * class RealTimeVideoStreamingAppSegmentHeader extends RealTimeVideoStreamingAppPacket
 * {
 *     //    chunkLength = 4;
 *     int headerLength = 4;
 *     int payloadLength; // size of the video data
 *     int frameLength; // length of the frame
 *     unsigned long frameNumber;
 *     unsigned long sequenceNumber;
 *     int sessionId;
 *     bool isLastFragment = false; // marker to check if it is the last fragment of a frame
 *     bool isFragmented = false;   // flag to see if the packet contains a fragment of the frame
 *     simtime_t payloadTimestamp;
 *     uint8_t pictureType;   // picture type of the frame the data in this packet belongs to.
 * 
 *     int totalFrags;
 *     int currentFrags;
 * }
 * </pre>
 */
class RealTimeVideoStreamingAppSegmentHeader : public ::RealTimeVideoStreamingAppPacket
{
  protected:
    int headerLength = 4;
    int payloadLength = 0;
    int frameLength = 0;
    unsigned long frameNumber = 0;
    unsigned long sequenceNumber = 0;
    int sessionId = 0;
    bool isLastFragment_ = false;
    bool isFragmented_ = false;
    omnetpp::simtime_t payloadTimestamp = SIMTIME_ZERO;
    uint8_t pictureType = 0;
    int totalFrags = 0;
    int currentFrags = 0;

  private:
    void copy(const RealTimeVideoStreamingAppSegmentHeader& other);

  protected:
    bool operator==(const RealTimeVideoStreamingAppSegmentHeader&) = delete;

  public:
    RealTimeVideoStreamingAppSegmentHeader();
    RealTimeVideoStreamingAppSegmentHeader(const RealTimeVideoStreamingAppSegmentHeader& other);
    virtual ~RealTimeVideoStreamingAppSegmentHeader();
    RealTimeVideoStreamingAppSegmentHeader& operator=(const RealTimeVideoStreamingAppSegmentHeader& other);
    virtual RealTimeVideoStreamingAppSegmentHeader *dup() const override {return new RealTimeVideoStreamingAppSegmentHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getHeaderLength() const;
    virtual void setHeaderLength(int headerLength);

    virtual int getPayloadLength() const;
    virtual void setPayloadLength(int payloadLength);

    virtual int getFrameLength() const;
    virtual void setFrameLength(int frameLength);

    virtual unsigned long getFrameNumber() const;
    virtual void setFrameNumber(unsigned long frameNumber);

    virtual unsigned long getSequenceNumber() const;
    virtual void setSequenceNumber(unsigned long sequenceNumber);

    virtual int getSessionId() const;
    virtual void setSessionId(int sessionId);

    virtual bool isLastFragment() const;
    virtual void setIsLastFragment(bool isLastFragment);

    virtual bool isFragmented() const;
    virtual void setIsFragmented(bool isFragmented);

    virtual omnetpp::simtime_t getPayloadTimestamp() const;
    virtual void setPayloadTimestamp(omnetpp::simtime_t payloadTimestamp);

    virtual uint8_t getPictureType() const;
    virtual void setPictureType(uint8_t pictureType);

    virtual int getTotalFrags() const;
    virtual void setTotalFrags(int totalFrags);

    virtual int getCurrentFrags() const;
    virtual void setCurrentFrags(int currentFrags);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RealTimeVideoStreamingAppSegmentHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RealTimeVideoStreamingAppSegmentHeader& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline RealTimeVideoStreamingAppPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<RealTimeVideoStreamingAppPacket*>(ptr.get<cObject>()); }
template<> inline StartRealTimeVideoStreamingAppPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<StartRealTimeVideoStreamingAppPacket*>(ptr.get<cObject>()); }
template<> inline StartSessionRealTimeVideoStreamingAppPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<StartSessionRealTimeVideoStreamingAppPacket*>(ptr.get<cObject>()); }
template<> inline StopSessionRealTimeVideoStreamingAppPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<StopSessionRealTimeVideoStreamingAppPacket*>(ptr.get<cObject>()); }
template<> inline RealTimeVideoStreamingAppSegmentHeader *fromAnyPtr(any_ptr ptr) { return check_and_cast<RealTimeVideoStreamingAppSegmentHeader*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __RTVIDEOSTREAMINGPACKETS_M_H

