//
// Generated file, do not edit! Created by opp_msgtool 6.0 from apps/vod/M1Message.msg.
//

#ifndef __M1MESSAGE_M_H
#define __M1MESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class M1Message;
#include "inet/networklayer/common/L3Address_m.h" // import inet.networklayer.common.L3Address

/**
 * Class generated from <tt>apps/vod/M1Message.msg:14</tt> by opp_msgtool.
 * <pre>
 * message M1Message
 * {
 *     inet::L3Address clientAddr;   // client address
 *     int clientPort;           // client UDP port
 *     long numPkSent;           // number of packets sent
 * }
 * </pre>
 */
class M1Message : public ::omnetpp::cMessage
{
  protected:
    inet::L3Address clientAddr;
    int clientPort = 0;
    long numPkSent = 0;

  private:
    void copy(const M1Message& other);

  protected:
    bool operator==(const M1Message&) = delete;

  public:
    M1Message(const char *name=nullptr, short kind=0);
    M1Message(const M1Message& other);
    virtual ~M1Message();
    M1Message& operator=(const M1Message& other);
    virtual M1Message *dup() const override {return new M1Message(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const inet::L3Address& getClientAddr() const;
    virtual inet::L3Address& getClientAddrForUpdate() { return const_cast<inet::L3Address&>(const_cast<M1Message*>(this)->getClientAddr());}
    virtual void setClientAddr(const inet::L3Address& clientAddr);

    virtual int getClientPort() const;
    virtual void setClientPort(int clientPort);

    virtual long getNumPkSent() const;
    virtual void setNumPkSent(long numPkSent);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const M1Message& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, M1Message& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline M1Message *fromAnyPtr(any_ptr ptr) { return check_and_cast<M1Message*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __M1MESSAGE_M_H

