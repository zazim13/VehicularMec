//
// Generated file, do not edit! Created by opp_msgtool 6.0 from stack/rlc/../../apps/PingPong/packets/PingPongPacket.msg.
//

#ifndef __PINGPONGPACKET_M_H
#define __PINGPONGPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class PingPongAppPacket;
class PingPongWarningPacket;
class PingPongStartPacket;
class PingPongStopPacket;
class PingPongPacket;
#include "nodes/mec/MECPlatform/MECPackets_m.h" // import nodes.mec.MECPlatform.MECPackets

/**
 * Class generated from <tt>stack/rlc/../../apps/PingPong/packets/PingPongPacket.msg:20</tt> by opp_msgtool.
 * <pre>
 * class PingPongAppPacket extends MECPacket
 * {
 * }
 * </pre>
 */
class PingPongAppPacket : public ::MECPacket
{
  protected:

  private:
    void copy(const PingPongAppPacket& other);

  protected:
    bool operator==(const PingPongAppPacket&) = delete;

  public:
    PingPongAppPacket();
    PingPongAppPacket(const PingPongAppPacket& other);
    virtual ~PingPongAppPacket();
    PingPongAppPacket& operator=(const PingPongAppPacket& other);
    virtual PingPongAppPacket *dup() const override {return new PingPongAppPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PingPongAppPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PingPongAppPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>stack/rlc/../../apps/PingPong/packets/PingPongPacket.msg:23</tt> by opp_msgtool.
 * <pre>
 * class PingPongWarningPacket extends PingPongAppPacket
 * {
 *     int ueOmnetID;
 *     double positionX;
 *     double positionY;
 *     double positionZ;
 *     bool danger;
 * }
 * </pre>
 */
class PingPongWarningPacket : public ::PingPongAppPacket
{
  protected:
    int ueOmnetID = 0;
    double positionX = 0;
    double positionY = 0;
    double positionZ = 0;
    bool danger = false;

  private:
    void copy(const PingPongWarningPacket& other);

  protected:
    bool operator==(const PingPongWarningPacket&) = delete;

  public:
    PingPongWarningPacket();
    PingPongWarningPacket(const PingPongWarningPacket& other);
    virtual ~PingPongWarningPacket();
    PingPongWarningPacket& operator=(const PingPongWarningPacket& other);
    virtual PingPongWarningPacket *dup() const override {return new PingPongWarningPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getUeOmnetID() const;
    virtual void setUeOmnetID(int ueOmnetID);

    virtual double getPositionX() const;
    virtual void setPositionX(double positionX);

    virtual double getPositionY() const;
    virtual void setPositionY(double positionY);

    virtual double getPositionZ() const;
    virtual void setPositionZ(double positionZ);

    virtual bool getDanger() const;
    virtual void setDanger(bool danger);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PingPongWarningPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PingPongWarningPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>stack/rlc/../../apps/PingPong/packets/PingPongPacket.msg:32</tt> by opp_msgtool.
 * <pre>
 * class PingPongStartPacket extends PingPongAppPacket
 * {
 *     double centerPositionX;
 *     double centerPositionY;
 *     double centerPositionZ;
 * 
 *     double radius;
 * }
 * </pre>
 */
class PingPongStartPacket : public ::PingPongAppPacket
{
  protected:
    double centerPositionX = 0;
    double centerPositionY = 0;
    double centerPositionZ = 0;
    double radius = 0;

  private:
    void copy(const PingPongStartPacket& other);

  protected:
    bool operator==(const PingPongStartPacket&) = delete;

  public:
    PingPongStartPacket();
    PingPongStartPacket(const PingPongStartPacket& other);
    virtual ~PingPongStartPacket();
    PingPongStartPacket& operator=(const PingPongStartPacket& other);
    virtual PingPongStartPacket *dup() const override {return new PingPongStartPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual double getCenterPositionX() const;
    virtual void setCenterPositionX(double centerPositionX);

    virtual double getCenterPositionY() const;
    virtual void setCenterPositionY(double centerPositionY);

    virtual double getCenterPositionZ() const;
    virtual void setCenterPositionZ(double centerPositionZ);

    virtual double getRadius() const;
    virtual void setRadius(double radius);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PingPongStartPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PingPongStartPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>stack/rlc/../../apps/PingPong/packets/PingPongPacket.msg:41</tt> by opp_msgtool.
 * <pre>
 * class PingPongStopPacket extends PingPongAppPacket
 * {
 * }
 * </pre>
 */
class PingPongStopPacket : public ::PingPongAppPacket
{
  protected:

  private:
    void copy(const PingPongStopPacket& other);

  protected:
    bool operator==(const PingPongStopPacket&) = delete;

  public:
    PingPongStopPacket();
    PingPongStopPacket(const PingPongStopPacket& other);
    virtual ~PingPongStopPacket();
    PingPongStopPacket& operator=(const PingPongStopPacket& other);
    virtual PingPongStopPacket *dup() const override {return new PingPongStopPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PingPongStopPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PingPongStopPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>stack/rlc/../../apps/PingPong/packets/PingPongPacket.msg:46</tt> by opp_msgtool.
 * <pre>
 * class PingPongPacket extends MECPacket
 * {
 *     unsigned int IDframe;
 *     int ueOmnetID;
 *     string data;
 * }
 * </pre>
 */
class PingPongPacket : public ::MECPacket
{
  protected:
    unsigned int IDframe = 0;
    int ueOmnetID = 0;
    omnetpp::opp_string data;

  private:
    void copy(const PingPongPacket& other);

  protected:
    bool operator==(const PingPongPacket&) = delete;

  public:
    PingPongPacket();
    PingPongPacket(const PingPongPacket& other);
    virtual ~PingPongPacket();
    PingPongPacket& operator=(const PingPongPacket& other);
    virtual PingPongPacket *dup() const override {return new PingPongPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual unsigned int getIDframe() const;
    virtual void setIDframe(unsigned int IDframe);

    virtual int getUeOmnetID() const;
    virtual void setUeOmnetID(int ueOmnetID);

    virtual const char * getData() const;
    virtual void setData(const char * data);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PingPongPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PingPongPacket& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline PingPongAppPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<PingPongAppPacket*>(ptr.get<cObject>()); }
template<> inline PingPongWarningPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<PingPongWarningPacket*>(ptr.get<cObject>()); }
template<> inline PingPongStartPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<PingPongStartPacket*>(ptr.get<cObject>()); }
template<> inline PingPongStopPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<PingPongStopPacket*>(ptr.get<cObject>()); }
template<> inline PingPongPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<PingPongPacket*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __PINGPONGPACKET_M_H

