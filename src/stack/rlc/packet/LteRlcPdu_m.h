//
// Generated file, do not edit! Created by opp_msgtool 6.0 from stack/rlc/packet/LteRlcPdu.msg.
//

#ifndef __LTERLCPDU_M_H
#define __LTERLCPDU_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class LteRlcPdu;
class LteRlcPduNewData;
#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

/**
 * Class generated from <tt>stack/rlc/packet/LteRlcPdu.msg:24</tt> by opp_msgtool.
 * <pre>
 * class LteRlcPdu extends inet::FieldsChunk
 * {
 *     // TODO: size 0
 *     chunkLength = inet::B(1); // TODO: should be a tag;
 *     unsigned int totalFragments;    // Total number of fragments
 *     unsigned int snoFragment;        // Sequence number of this fragment
 *     unsigned int snoMainPacket;        // ID of packet (sequence number)
 * }
 * </pre>
 */
class LteRlcPdu : public ::inet::FieldsChunk
{
  protected:
    unsigned int totalFragments = 0;
    unsigned int snoFragment = 0;
    unsigned int snoMainPacket = 0;

  private:
    void copy(const LteRlcPdu& other);

  protected:
    bool operator==(const LteRlcPdu&) = delete;

  public:
    LteRlcPdu();
    LteRlcPdu(const LteRlcPdu& other);
    virtual ~LteRlcPdu();
    LteRlcPdu& operator=(const LteRlcPdu& other);
    virtual LteRlcPdu *dup() const override {return new LteRlcPdu(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual unsigned int getTotalFragments() const;
    virtual void setTotalFragments(unsigned int totalFragments);

    virtual unsigned int getSnoFragment() const;
    virtual void setSnoFragment(unsigned int snoFragment);

    virtual unsigned int getSnoMainPacket() const;
    virtual void setSnoMainPacket(unsigned int snoMainPacket);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LteRlcPdu& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LteRlcPdu& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>stack/rlc/packet/LteRlcPdu.msg:34</tt> by opp_msgtool.
 * <pre>
 * // new data indication for MAC
 * class LteRlcPduNewData extends LteRlcPdu
 * {
 * }
 * </pre>
 */
class LteRlcPduNewData : public ::LteRlcPdu
{
  protected:

  private:
    void copy(const LteRlcPduNewData& other);

  protected:
    bool operator==(const LteRlcPduNewData&) = delete;

  public:
    LteRlcPduNewData();
    LteRlcPduNewData(const LteRlcPduNewData& other);
    virtual ~LteRlcPduNewData();
    LteRlcPduNewData& operator=(const LteRlcPduNewData& other);
    virtual LteRlcPduNewData *dup() const override {return new LteRlcPduNewData(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LteRlcPduNewData& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LteRlcPduNewData& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline LteRlcPdu *fromAnyPtr(any_ptr ptr) { return check_and_cast<LteRlcPdu*>(ptr.get<cObject>()); }
template<> inline LteRlcPduNewData *fromAnyPtr(any_ptr ptr) { return check_and_cast<LteRlcPduNewData*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __LTERLCPDU_M_H

