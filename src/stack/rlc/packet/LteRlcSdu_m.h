//
// Generated file, do not edit! Created by opp_msgtool 6.0 from stack/rlc/packet/LteRlcSdu.msg.
//

#ifndef __LTERLCSDU_M_H
#define __LTERLCSDU_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class LteRlcSdu;
#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

/**
 * Class generated from <tt>stack/rlc/packet/LteRlcSdu.msg:22</tt> by opp_msgtool.
 * <pre>
 * class LteRlcSdu extends inet::FieldsChunk
 * {
 *     //\@customize(true);
 *     // TODO: size 0
 *     chunkLength = inet::B(1); // TODO: should be a tag;
 *     unsigned int snoMainPacket;                        // ID of packet (sequence number)
 *     unsigned int lengthMainPacket;
 * }
 * </pre>
 */
class LteRlcSdu : public ::inet::FieldsChunk
{
  protected:
    unsigned int snoMainPacket = 0;
    unsigned int lengthMainPacket = 0;

  private:
    void copy(const LteRlcSdu& other);

  protected:
    bool operator==(const LteRlcSdu&) = delete;

  public:
    LteRlcSdu();
    LteRlcSdu(const LteRlcSdu& other);
    virtual ~LteRlcSdu();
    LteRlcSdu& operator=(const LteRlcSdu& other);
    virtual LteRlcSdu *dup() const override {return new LteRlcSdu(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual unsigned int getSnoMainPacket() const;
    virtual void setSnoMainPacket(unsigned int snoMainPacket);

    virtual unsigned int getLengthMainPacket() const;
    virtual void setLengthMainPacket(unsigned int lengthMainPacket);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LteRlcSdu& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LteRlcSdu& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline LteRlcSdu *fromAnyPtr(any_ptr ptr) { return check_and_cast<LteRlcSdu*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __LTERLCSDU_M_H

