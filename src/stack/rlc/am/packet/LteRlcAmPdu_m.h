//
// Generated file, do not edit! Created by opp_msgtool 6.0 from stack/rlc/am/packet/LteRlcAmPdu.msg.
//

#ifndef __LTERLCAMPDU_M_H
#define __LTERLCAMPDU_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class LteRlcAmPdu;
#include "stack/rlc/LteRlcDefs_m.h" // import stack.rlc.LteRlcDefs

#include "stack/rlc/packet/LteRlcPdu_m.h" // import stack.rlc.packet.LteRlcPdu

/**
 * Class generated from <tt>stack/rlc/am/packet/LteRlcAmPdu.msg:25</tt> by opp_msgtool.
 * <pre>
 * class LteRlcAmPdu extends LteRlcPdu
 * {
 *     \@customize(true);
 *     unsigned short amType \@enum(LteAmType);
 *     unsigned short txNumber;
 *     int firstSn;
 *     int lastSn;
 *     abstract bool bitmap[];
 * }
 * </pre>
 *
 * LteRlcAmPdu_Base is only useful if it gets subclassed, and LteRlcAmPdu is derived from it.
 * The minimum code to be written for LteRlcAmPdu is the following:
 *
 * <pre>
 * class LteRlcAmPdu : public LteRlcAmPdu_Base
 * {
 *   private:
 *     void copy(const LteRlcAmPdu& other) { ... }

 *   public:
 *     LteRlcAmPdu() : LteRlcAmPdu_Base() {}
 *     LteRlcAmPdu(const LteRlcAmPdu& other) : LteRlcAmPdu_Base(other) {copy(other);}
 *     LteRlcAmPdu& operator=(const LteRlcAmPdu& other) {if (this==&other) return *this; LteRlcAmPdu_Base::operator=(other); copy(other); return *this;}
 *     virtual LteRlcAmPdu *dup() const override {return new LteRlcAmPdu(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from LteRlcAmPdu_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(LteRlcAmPdu)
 * </pre>
 */
class LteRlcAmPdu_Base : public ::LteRlcPdu
{
  protected:
    unsigned short amType = 0;
    unsigned short txNumber = 0;
    int firstSn = 0;
    int lastSn = 0;

  private:
    void copy(const LteRlcAmPdu_Base& other);

  protected:
    bool operator==(const LteRlcAmPdu_Base&) = delete;
    // make constructors protected to avoid instantiation
    LteRlcAmPdu_Base();
    LteRlcAmPdu_Base(const LteRlcAmPdu_Base& other);
    // make assignment operator protected to force the user override it
    LteRlcAmPdu_Base& operator=(const LteRlcAmPdu_Base& other);

  public:
    virtual ~LteRlcAmPdu_Base();
    virtual LteRlcAmPdu_Base *dup() const override {throw omnetpp::cRuntimeError("You forgot to manually add a dup() function to class LteRlcAmPdu");}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual unsigned short getAmType() const;
    virtual void setAmType(unsigned short amType);

    virtual unsigned short getTxNumber() const;
    virtual void setTxNumber(unsigned short txNumber);

    virtual int getFirstSn() const;
    virtual void setFirstSn(int firstSn);

    virtual int getLastSn() const;
    virtual void setLastSn(int lastSn);

    virtual void setBitmapArraySize(size_t size) = 0;
    virtual size_t getBitmapArraySize() const = 0;
    virtual bool getBitmap(size_t k) const = 0;
    virtual void setBitmap(size_t k, bool bitmap) = 0;
    virtual void insertBitmap(size_t k, bool bitmap) = 0;
    [[deprecated]] void insertBitmap(bool bitmap) {appendBitmap(bitmap);}
    virtual void appendBitmap(bool bitmap) = 0;
    virtual void eraseBitmap(size_t k) = 0;
};


namespace omnetpp {

template<> inline LteRlcAmPdu_Base *fromAnyPtr(any_ptr ptr) { return check_and_cast<LteRlcAmPdu_Base*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __LTERLCAMPDU_M_H

