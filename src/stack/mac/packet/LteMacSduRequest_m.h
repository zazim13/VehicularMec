//
// Generated file, do not edit! Created by opp_msgtool 6.0 from stack/mac/packet/LteMacSduRequest.msg.
//

#ifndef __LTEMACSDUREQUEST_M_H
#define __LTEMACSDUREQUEST_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class LteMacSduRequest;
#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

/**
 * Class generated from <tt>stack/mac/packet/LteMacSduRequest.msg:19</tt> by opp_msgtool.
 * <pre>
 * class LteMacSduRequest extends inet::FieldsChunk
 * {
 *     \@customize(true);
 *     unsigned int sduSize;       // size of the requested SDU
 *     chunkLength = inet::B(1); // TODO: size 0
 * }
 * </pre>
 *
 * LteMacSduRequest_Base is only useful if it gets subclassed, and LteMacSduRequest is derived from it.
 * The minimum code to be written for LteMacSduRequest is the following:
 *
 * <pre>
 * class LteMacSduRequest : public LteMacSduRequest_Base
 * {
 *   private:
 *     void copy(const LteMacSduRequest& other) { ... }

 *   public:
 *     LteMacSduRequest() : LteMacSduRequest_Base() {}
 *     LteMacSduRequest(const LteMacSduRequest& other) : LteMacSduRequest_Base(other) {copy(other);}
 *     LteMacSduRequest& operator=(const LteMacSduRequest& other) {if (this==&other) return *this; LteMacSduRequest_Base::operator=(other); copy(other); return *this;}
 *     virtual LteMacSduRequest *dup() const override {return new LteMacSduRequest(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from LteMacSduRequest_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(LteMacSduRequest)
 * </pre>
 */
class LteMacSduRequest_Base : public ::inet::FieldsChunk
{
  protected:
    unsigned int sduSize = 0;

  private:
    void copy(const LteMacSduRequest_Base& other);

  protected:
    bool operator==(const LteMacSduRequest_Base&) = delete;
    // make constructors protected to avoid instantiation
    LteMacSduRequest_Base();
    LteMacSduRequest_Base(const LteMacSduRequest_Base& other);
    // make assignment operator protected to force the user override it
    LteMacSduRequest_Base& operator=(const LteMacSduRequest_Base& other);

  public:
    virtual ~LteMacSduRequest_Base();
    virtual LteMacSduRequest_Base *dup() const override {throw omnetpp::cRuntimeError("You forgot to manually add a dup() function to class LteMacSduRequest");}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual unsigned int getSduSize() const;
    virtual void setSduSize(unsigned int sduSize);
};


namespace omnetpp {

template<> inline LteMacSduRequest_Base *fromAnyPtr(any_ptr ptr) { return check_and_cast<LteMacSduRequest_Base*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __LTEMACSDUREQUEST_M_H

